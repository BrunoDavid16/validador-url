/**
 * Classe de testes para ValidadorParametrosURL
 * 
 * Esta classe testa todas as funcionalidades do validador sem depend√™ncias externas.
 * Pode ser executada diretamente com 'java ValidadorParametrosURLTest'
 */
public class ValidadorParametrosURLTest {
    
    private static int testesExecutados = 0;
    private static int testesPassaram = 0;
    
    /**
     * M√©todo principal para executar todos os testes
     */
    public static void main(String[] args) {
        System.out.println("=== Executando Testes do Validador de Par√¢metros URL ===\n");
        
        // Executa todos os testes
        testCasosValidosExemplos();
        testCasosInvalidosExemplos();
        testUrlSemInterrogacao();
        testUrlVaziaOuNula();
        testParametrosComValoresVazios();
        testMultiplosIguais();
        testCaracteresEspeciaisNome();
        testCaracteresValidosValor();
        testEspacosEmBranco();
        testMultiplosParametrosValidos();
        testParametrosAlfanumericos();
        
        // Relat√≥rio final
        System.out.println("\n=== Resultados dos Testes ===");
        System.out.println("Testes executados: " + testesExecutados);
        System.out.println("Testes passaram: " + testesPassaram);
        System.out.println("Taxa de sucesso: " + (double)testesPassaram/testesExecutados * 100 + "%");
        
        if (testesPassaram == testesExecutados) {
            System.out.println("‚úÖ Todos os testes passaram!");
        } else {
            System.out.println("‚ùå Alguns testes falharam!");
        }
    }
    
    /**
     * M√©todo auxiliar para verificar se o resultado esperado √© igual ao atual
     */
    private static void assertEquals(String esperado, String atual, String nomeDoTeste) {
        testesExecutados++;
        if (esperado.equals(atual)) {
            testesPassaram++;
            System.out.println("‚úÖ PASS: " + nomeDoTeste);
        } else {
            System.out.println("‚ùå FAIL: " + nomeDoTeste);
            System.out.println("   Esperado: '" + esperado + "'");
            System.out.println("   Atual: '" + atual + "'");
        }
    }
    
    public static void testCasosValidosExemplos() {
        System.out.println("üìã Testando casos v√°lidos - Exemplos do desafio");
        
        assertEquals("Parametros validos", 
            ValidadorParametrosURL.validarParametrosUrl("?usuario=joao&idade=30"),
            "Exemplo 1: ?usuario=joao&idade=30");
        
        assertEquals("Parametros validos", 
            ValidadorParametrosURL.validarParametrosUrl("?nome=ana&email=ana@mail.com"),
            "Exemplo 2: ?nome=ana&email=ana@mail.com");
            
        System.out.println();
    }

    public static void testCasosInvalidosExemplos() {
        System.out.println("üìã Testando casos inv√°lidos - Exemplos do desafio");
        
        assertEquals("Parametros invalidos", 
            ValidadorParametrosURL.validarParametrosUrl("usuario=joao&idade=abc"),
            "Exemplo 3: usuario=joao&idade=abc (sem ?)");
        
        assertEquals("Parametros invalidos", 
            ValidadorParametrosURL.validarParametrosUrl("?usuario=sabrina idade=30"),
            "Exemplo 4: ?usuario=sabrina idade=30 (espa√ßo no nome)");
            
        System.out.println();
    }

    public static void testUrlSemInterrogacao() {
        System.out.println("üîç Testando URL sem interroga√ß√£o inicial");
        
        assertEquals("Parametros invalidos", 
            ValidadorParametrosURL.validarParametrosUrl("param=valor"),
            "URL sem ? inicial");
            
        System.out.println();
    }

    public static void testUrlVaziaOuNula() {
        System.out.println("üîç Testando URL vazia ou nula");
        
        assertEquals("Parametros invalidos", 
            ValidadorParametrosURL.validarParametrosUrl(""),
            "String vazia");
        
        assertEquals("Parametros invalidos", 
            ValidadorParametrosURL.validarParametrosUrl(null),
            "String nula");
        
        assertEquals("Parametros invalidos", 
            ValidadorParametrosURL.validarParametrosUrl("?"),
            "Apenas ? sem par√¢metros");
            
        System.out.println();
    }

    public static void testParametrosComValoresVazios() {
        System.out.println("üîç Testando par√¢metros com valores vazios");
        
        assertEquals("Parametros invalidos", 
            ValidadorParametrosURL.validarParametrosUrl("?param="),
            "Valor vazio");
        
        assertEquals("Parametros invalidos", 
            ValidadorParametrosURL.validarParametrosUrl("?=valor"),
            "Nome vazio");
            
        System.out.println();
    }

    public static void testMultiplosIguais() {
        System.out.println("üîç Testando m√∫ltiplos sinais de igual");
        
        assertEquals("Parametros invalidos", 
            ValidadorParametrosURL.validarParametrosUrl("?param==valor"),
            "Dois sinais de igual seguidos");
        
        assertEquals("Parametros invalidos", 
            ValidadorParametrosURL.validarParametrosUrl("?param=val=or"),
            "Sinal de igual no valor");
            
        System.out.println();
    }

    public static void testCaracteresEspeciaisNome() {
        System.out.println("üîç Testando caracteres especiais inv√°lidos no nome");
        
        assertEquals("Parametros invalidos", 
            ValidadorParametrosURL.validarParametrosUrl("?param@=valor"),
            "@ no nome do par√¢metro");
        
        assertEquals("Parametros invalidos", 
            ValidadorParametrosURL.validarParametrosUrl("?param-name=valor"),
            "H√≠fen no nome do par√¢metro");
        
        assertEquals("Parametros invalidos", 
            ValidadorParametrosURL.validarParametrosUrl("?param_name=valor"),
            "Underscore no nome do par√¢metro");
            
        System.out.println();
    }

    public static void testCaracteresValidosValor() {
        System.out.println("üîç Testando caracteres v√°lidos no valor");
        
        assertEquals("Parametros validos", 
            ValidadorParametrosURL.validarParametrosUrl("?email=user@domain.com"),
            "@ e . no valor (email)");
        
        assertEquals("Parametros validos", 
            ValidadorParametrosURL.validarParametrosUrl("?site=www.exemplo.com"),
            ". no valor (dom√≠nio)");
            
        System.out.println();
    }

    public static void testEspacosEmBranco() {
        System.out.println("üîç Testando espa√ßos em branco");
        
        assertEquals("Parametros invalidos", 
            ValidadorParametrosURL.validarParametrosUrl("?param nome=valor"),
            "Espa√ßo no nome do par√¢metro");
        
        assertEquals("Parametros invalidos", 
            ValidadorParametrosURL.validarParametrosUrl("?param=valor espa√ßo"),
            "Espa√ßo no valor do par√¢metro");
            
        System.out.println();
    }

    public static void testMultiplosParametrosValidos() {
        System.out.println("üîç Testando m√∫ltiplos par√¢metros v√°lidos");
        
        assertEquals("Parametros validos", 
            ValidadorParametrosURL.validarParametrosUrl("?a=1&b=2&c=3"),
            "M√∫ltiplos par√¢metros simples");
        
        assertEquals("Parametros validos", 
            ValidadorParametrosURL.validarParametrosUrl("?nome=joao&email=joao@test.com&idade=25"),
            "M√∫ltiplos par√¢metros complexos");
            
        System.out.println();
    }

    public static void testParametrosAlfanumericos() {
        System.out.println("üîç Testando par√¢metros alfanum√©ricos");
        
        assertEquals("Parametros validos", 
            ValidadorParametrosURL.validarParametrosUrl("?param1=valor1&param2=123"),
            "Nomes e valores alfanum√©ricos");
        
        assertEquals("Parametros validos", 
            ValidadorParametrosURL.validarParametrosUrl("?abc123=xyz789"),
            "Par√¢metro totalmente alfanum√©rico");
            
        System.out.println();
    }
}